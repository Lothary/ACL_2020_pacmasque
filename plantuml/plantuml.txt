@startuml

package libgdx {
    interface ApplicationListener {
        # Screen screen

        + void create()
        + void resize(int width, int height)
        + void render()
        + void pause()
        + void resume()
        + void dispose()
    }

    abstract class Game {
        + void create()
        + void dispose()
    }

    Game .up.|> ApplicationListener
}

package java {
	package lang {
		class Exception { }
	}
}

package pacmasque {
	interface Drawable {
		void draw(Batch batch, float x, float y, float width, float height)
	}

	class PacMasque extends Game {
		+ {static} int V_WIDTH
		+ {static} int V_HEIGHT
		- NavigationController navigationViewController
        + Pacmasque()
        + Pacmasque(Environment environment)
    }

    package algorithm {

        abstract class Algorithm {
            + Algorithm(Entity entity)
            + {abstract} tick()
        }

        class AlgorithmRandom extends Algorithm {
            + AlgorithmRandom(World world, Entity entity)
        }
    }

    package entity {

        class BasicMonster implements Monster {
            - Texture magicTexture
            - Texture normalTexture
			- Algorithm algorithm
			+ BasicMonster(int x, int y)
			- void updateMovement()
        }

        class BasicPastille implements Pastille {
            - Vector2 position
            + BasicPastille(int x, int y)
        }

        class BasicPlayer implements Player {
            - Timer.Task timerMagicalEffect
            - Vector2 position
            - int lifePoints
            + BasicPlayer(int x, int y)
			- void updateMovement()
        }

		interface Entity {
			Vector2 getPosition()
		}

		Entity -right-> Drawable

		interface Monster extends Entity {
			void setAlgorithm(Algorithm algorithm)
			Algorithm getAlgorithm()
			float getNextPositionX()
			float getNextPositionY()
			void setPositionX(float x)
			void setPositionY(float y)
			void addMouvement(int direction, int number)
			boolean isMoving()
			void setPlayerIsMagic(boolean b)
		}

		interface Pastille extends Entity {
		    boolean isVisible
		    void setVisible(boolean visible)
		}

		interface Player extends Entity {
			 float getPositionX()
			 float getPositionY()
			 void setPositionX(float x)
			 void setPositionY(float y)
             void addMouvement(int direction, int number)
             void deleteMouvements()
             boolean isMagic()
             void setMagic(boolean magic)
             boolean isDead()
             void takeALife()
             int getNumberLifes()
		}

	}

	package exception {

		class LabyrinthConstructorException extends PacmasqueException {
        	+ LabyrinthConstructorException(String message)
        }

        class LabyrinthException extends PacmasqueException {
            + LabyrinthException(String message)
        }

		class LabyrinthLoaderException extends PacmasqueException {
        	+ LabyrinthLoaderException(String message)
        }

        class TextureException extends PacmasqueException {
            + TextureException(String message)
        }

        abstract class PacmasqueException extends Exception {
        	+ PacmasqueException(String message)
        }
	}

	package model {
	    class CollisionManager {
	        + CollisionManager(World world)
	        + boolean isCollision(Entity entity)
	        + boolean isInside(Case case)
	    }

		class Labyrinth {
			- int width
			- int height
			- List<Vector2> positionsMurs
			- Texture wallTexture
			- Texture backgroundTexture
			- Vector2 positionDepart
		 	+ Labyrinth(int width, int height)

		 	- loadTextures(TexturePack texturePack)
		 	- loadFallbackTextures(String textureName)
		 	+ void setMur(int x, int y)
		 	+ boolean isWall(Vector2 vec)
		 	- boolean inRange(int x, int y)

		}

		Labyrinth -left-> Drawable

        class World {
 			+ World(Labyrinth labyrinth, String worldName)
 			+ void addMonster(Monster monster)
 			- void createMonsters(int nb)
 			- Vector2 findFreeCase()
 			- boolean isSpecialCase(Vector2 coordinates)
 			+ void addPastille(Pastille pastille)
 			- void createPastille(int nb)
 			- void createSpecialCases()
 			+ int getWidth()
 			+ int getHeight()
 			+ void movePlayer(int direction)
 			+ void update()
 			- void moveMonsters()
 			- void updateCollision()
 			- void updateLevelState()
 			- void restart()
		}

		World -left-> Drawable
		World -up-"*" Entity
        World -left-"1" Player
        World -up-"1" Labyrinth
        World --"1" CollisionManager

	    class AlgorithmManager{
	        + AlgorithmManager(World world)
	    }

        package cases {

            abstract class Case implements Drawable {
                + enum TypeCase
                + Case(int x, int y)
                + Vector2 getPosition()
                + TypeCase getType()
            }

            class MagicCase extends TexturableCase {}

            class TrapCase extends TexturableCase {}

            class TeleportationCase extends TexturableCase {}

            class TreasureCase extends TexturableCase {}

            abstract class TexturableCase extends Case {
                - Texture texture
                + TexturableCase(int x, int y, TexturePack pack)
            }
	    }

		World --"*" Case
	}
}
@enduml
