@startuml
package libgdx {
    interface ApplicationListener {
        # Screen screen

        + void create()
        + void resize(int width, int height)
        + void render()
        + void pause()
        + void resume()
        + void dispose()
    }

    abstract class Game {
        + void create()
        + void dispose()
    }

    class ScreenAdapter {
        + void render(float delta)
        + void resize(int width, int height)
        + void show()
        + void hide()
        + void pause()
        + void resume()
        + void dispose()
    }

    Game .up.|> ApplicationListener

    interface InputProcessor { }
}

package java {
	package lang {
		class Exception { }
	}
}

package pacmasque {

    package entity {

        class BasicMonster implements Monster {
			- Vector2 position
			+ BasicMonster(int x, int y)
        }

        class BasicPastille implements Pastille {
            - Vector2 position
            + BasicPastille(int x, int y)
        }

        class BasicPlayer implements Player {
            - Vector2 position
            - int lifePoints
            + BasicPlayer(int x, int y)
        }

		interface Entity implements pacmasque.Drawable {
			Vector2 getPosition()
		}

		interface Monster extends Entity {

		}

		interface Pastille extends Entity {

		}

		interface Player extends Entity {
			 float getPositionX()
			 float getPositionY()
			 float setPositionX(float x)
			 float setPositionY(float y)

		}

	}

	package exception {

		class LabyrinthConstructorException extends PacmasqueException {
        	+ LabyrinthConstructorException(String message)
        }

		class LabyrinthLoaderException extends PacmasqueException {
        	+ LabyrinthLoaderException(String message)
        }

        abstract class PacmasqueException extends Exception {
        	+ PacmasqueException(String message)
        }

	}

	package model {

		class Labyrinth implements pacmasque.Drawable {
			- int width
			- int height
			- List<Vector2> positionsMurs
		 	+ Labyrinth(int width, int height)

		 	+ void setMur(int x, int y)
		 	+ int getWidth()
		 	+ int getHeight()
		 	+ boolean isWall(Vector2 vec)
		}

        class World implements pacmasque.Drawable {
 			+ World(Labyrinth labyrinth)
 			+ int getWidth()
 			+ int getHeight()
 			+ void movePlayer(int direction)
		}

		World --"*" Entity
        World --"1" Player
        World --"1" Labyrinth
	}

	package utils {

		interface LabyrinthBuilder {
			Labyrinth build(String content) throws PacmasqueException
		}

		class LabyrinthConstructor implements LabyrinthBuilder {
			- Map<Integer, String> labyrinths

        	+ LabyrinthConstructor()
        	+ Labyrinth build(int key) throws PacmasqueException
        }

        class LabyrinthLoader {
            - {static} LabyrinthLoader _shared
            + {static} LabyrinthLoader shared()
            - String metaTag
            - String delimiterIn
            - String delimiterOut
            - String lineSeparator
            - String fieldSeparator

            + LabyrinthLoader(String metaTag, String delimiterIn, String delimiterOut, String lineSeparator, String fieldSeparator)

            - String inputDelimiter()
            - String outputDelimiter()
            + Labyrinth loadFile(String path) throws LabyrinthLoaderException
        }

		class TexturePack {
			 - Map<String, String> resources
			 + Texture get(String name)
		}

		class TexturePackFactory <<(S,#FF7700)>> {
			+ TexturePack getTexturePack(String name)
        }

		TexturePackFactory --"*" TexturePack
	}

	package views {
		class GameView extends View implements InputProcessor {
		    + GameView(World world)
		}

		GameView --"1" World

		class SplashView extends View {
            - Stage stage
        	- Texture texture
			+ SplashView(float viewPortWidth, float viewPortHeight)
        }

		abstract View extends ScreenAdapter {
		    - Batch batch
		    - Camera camera
		    - Viewport viewport

		    + View(float viewportWidth, float viewportHeight)
		    + View(Batch batch, Camera camera, Viewport viewport)
		    + Viewport getViewport()
		    + Batch getBatch()
		    + Camera getCamera()
		    + {abstract} void update(float delta)
		}

	}

	interface Drawable {
		void draw(Batch batch, float x, float y, float width, float height)
	}

	class PacMasque extends Game {
		+ {static} int V_WIDTH
		+ {static} int V_HEIGHT
        + View getRenderedView()
        - void setScreen(View screen)
    }

	PacMasque --"1" World
	PacMasque --"1" View : renderedView
	PacMasque --"*" View : views
}
@enduml
